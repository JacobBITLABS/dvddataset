import type { ClickMode } from ".pnpm/tsparticles-engine@2.12.0/node_modules/tsparticles-engine/types/Enums/Modes/ClickMode";
import type { Container } from ".pnpm/tsparticles-engine@2.12.0/node_modules/tsparticles-engine/types/Core/Container";
import type { Engine } from ".pnpm/tsparticles-engine@2.12.0/node_modules/tsparticles-engine/types/Core/Engine";
import type { ICoordinates } from ".pnpm/tsparticles-engine@2.12.0/node_modules/tsparticles-engine/types/Core/Interfaces/ICoordinates";
import type { IDelta } from ".pnpm/tsparticles-engine@2.12.0/node_modules/tsparticles-engine/types/Core/Interfaces/IDelta";
import type { IMouseData } from ".pnpm/tsparticles-engine@2.12.0/node_modules/tsparticles-engine/types/Core/Interfaces/IMouseData";
import type { IParticlesOptions } from ".pnpm/tsparticles-engine@2.12.0/node_modules/tsparticles-engine/types/Options/Interfaces/Particles/IParticlesOptions";
import { Particle } from ".pnpm/tsparticles-engine@2.12.0/node_modules/tsparticles-engine/types/Core/Particle";
import { QuadTree } from ".pnpm/tsparticles-engine@2.12.0/node_modules/tsparticles-engine/types/Core/Utils/QuadTree";
import type { RecursivePartial } from ".pnpm/tsparticles-engine@2.12.0/node_modules/tsparticles-engine/types/Types/RecursivePartial";
export declare class Particles {
    lastZIndex: number;
    limit: number;
    movers: import(".pnpm/tsparticles-engine@2.12.0/node_modules/tsparticles-engine").IParticleMover[];
    needsSort: boolean;
    pool: Particle[];
    pushing?: boolean;
    quadTree: QuadTree;
    updaters: import(".pnpm/tsparticles-engine@2.12.0/node_modules/tsparticles-engine").IParticleUpdater[];
    private _array;
    private readonly _container;
    private readonly _engine;
    private readonly _interactionManager;
    private _nextId;
    private _zArray;
    constructor(engine: Engine, container: Container);
    get count(): number;
    addManualParticles(): void;
    addParticle(position?: ICoordinates, overrideOptions?: RecursivePartial<IParticlesOptions>, group?: string, initializer?: (particle: Particle) => boolean): Particle | undefined;
    clear(): void;
    destroy(): void;
    draw(delta: IDelta): Promise<void>;
    filter(condition: (particle: Particle) => boolean): Particle[];
    find(condition: (particle: Particle) => boolean): Particle | undefined;
    handleClickMode(mode: ClickMode | string): void;
    init(): void;
    push(nb: number, mouse?: IMouseData, overrideOptions?: RecursivePartial<IParticlesOptions>, group?: string): void;
    redraw(): Promise<void>;
    remove(particle: Particle, group?: string, override?: boolean): void;
    removeAt(index: number, quantity?: number, group?: string, override?: boolean): void;
    removeQuantity(quantity: number, group?: string): void;
    setDensity(): void;
    update(delta: IDelta): Promise<void>;
    private readonly _applyDensity;
    private readonly _initDensityFactor;
    private readonly _pushParticle;
    private readonly _removeParticle;
}
