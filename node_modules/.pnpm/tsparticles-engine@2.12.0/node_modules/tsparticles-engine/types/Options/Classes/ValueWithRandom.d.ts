import { AnimationOptions, RangedAnimationOptions } from ".pnpm/tsparticles-engine@2.12.0/node_modules/tsparticles-engine/types/Options/Classes/AnimationOptions";
import type { IAnimationValueWithRandom, IRangedAnimationValueWithRandom, IValueWithRandom } from ".pnpm/tsparticles-engine@2.12.0/node_modules/tsparticles-engine/types/Options/Interfaces/IValueWithRandom";
import type { IOptionLoader } from ".pnpm/tsparticles-engine@2.12.0/node_modules/tsparticles-engine/types/Options/Interfaces/IOptionLoader";
import { Random } from ".pnpm/tsparticles-engine@2.12.0/node_modules/tsparticles-engine/types/Options/Classes/Random";
import type { RangeValue } from ".pnpm/tsparticles-engine@2.12.0/node_modules/tsparticles-engine/types/Types/RangeValue";
import type { RecursivePartial } from ".pnpm/tsparticles-engine@2.12.0/node_modules/tsparticles-engine/types/Types/RecursivePartial";
export declare class ValueWithRandom implements IValueWithRandom, IOptionLoader<IValueWithRandom> {
    random: Random;
    value: RangeValue;
    constructor();
    load(data?: RecursivePartial<IValueWithRandom>): void;
}
export declare class AnimationValueWithRandom extends ValueWithRandom implements IOptionLoader<IAnimationValueWithRandom> {
    animation: AnimationOptions;
    constructor();
    get anim(): AnimationOptions;
    set anim(value: AnimationOptions);
    load(data?: RecursivePartial<IAnimationValueWithRandom>): void;
}
export declare class RangedAnimationValueWithRandom extends AnimationValueWithRandom implements IOptionLoader<IRangedAnimationValueWithRandom> {
    animation: RangedAnimationOptions;
    constructor();
    load(data?: RecursivePartial<IRangedAnimationValueWithRandom>): void;
}
